
    return
    output_file = open("humans.txt", "w")

    #Error found: _id can't be trusted in qdoc, text can probably

    titleLookup = {}
    for item in result:
        #print(item)
        articleTitle = item['title']
        entityTitle = item['entity_lookup'][0]['title']

        if (articleTitle not in titleLookup):
            titleLookup[articleTitle] = set()

        titleLookup[articleTitle].add(entityTitle)

    print("Processed all articles")
    
    print("Constructing adjacency matrix")
    adjMatrix = {}

    personCount = {}

    for title, people in titleLookup.items():

        for person in people:
            if (person not in adjMatrix):
                adjMatrix[person] = {}
            for subPerson in people:
                if (subPerson != person):
                    if (subPerson not in adjMatrix[person]):
                        adjMatrix[person][subPerson] = 1
                    else:
                        adjMatrix[person][subPerson] = adjMatrix[person][subPerson] + 1



    output_file.write(json.dumps(adjMatrix, encoding="utf-8") + '\n')
    #match = {"$match": {"timestamp" : {"$gt" : startTime, "$lt" : endTime}}}
    #qdocLookup = list(db.qdoc.find({'_id': {'$exists': True}}).limit(100))

    idLookup = {}
    for id, entry in enumerate(adjMatrix.keys()):
        idLookup[entry] = id
    #print('id' + str(idLookup))

    print("Constructing d3 JSON")
    graphInput = {"nodes" : [], "links" : []}
    #print(adjMatrix)
    for source, otherEntities in adjMatrix.items():
        graphInput['nodes'].append({"name" : source, "group" : 0})
        for target in otherEntities:
            graphInput['links'].append({"source" : idLookup[source], "target" : idLookup[target], "value" : adjMatrix[source][target]})
    output_file.close()

    with open('entities.json', 'w') as fp:
        json.dump(graphInput, fp)

qdocEntityLookup()
#testing()

'''
print("Constructing d3 JSON")
    graphInput = {"nodes" : [], "links" : []}
    #print(adjMatrix)
    for source, otherEntities in adjMatrix.items():
        added = False
        for target in otherEntities:
            if (adjMatrix[source][target] > 2):
                if (not added):
                    graphInput['nodes'].append({"name" : source, "group" : 0})
                    added = True
                graphInput['links'].append({"source" : idLookup[source], "target" : idLookup[target], "value" : adjMatrix[source][target]})
    print('graph' + str(graphInput))
    output_file.close()
'''